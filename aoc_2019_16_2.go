package main

import "fmt"

var lim = int64(100)

func abs(x int64) int64 {
  if x < 0 {
    return -x
  }
  return x
}

func inject(input []int64, l int64) int64 {
  sum := int64(0)
  length := int64(len(input))
  for i := int64(0); i <= length/l; i++ {
    max := (l*i)+(l/2)
    if (l*i)+(l/2) > length {
      max = length
    } 
    for _, v := range input[l*i:max] {  
      if i % 2 == 0 {
        sum += v  
      } else {
        sum -= v
      }
    }
  }
  return sum
}

func main() {
  base_input := []int64{5, 9, 7, 0, 1, 5, 7, 0, 6, 7, 5, 7, 6, 0, 9, 2, 4, 4, 8, 1, 4, 6, 8, 0, 1, 2, 0, 6, 7, 9, 0, 2, 4, 7, 8, 8, 1, 2, 3, 7, 7, 4, 9, 2, 6, 1, 3, 9, 5, 4, 5, 6, 6, 2, 5, 6, 8, 6, 3, 2, 2, 7, 6, 2, 4, 0, 9, 0, 7, 2, 6, 5, 3, 8, 0, 7, 6, 7, 1, 9, 0, 3, 1, 8, 2, 7, 1, 1, 0, 1, 1, 2, 2, 1, 8, 9, 0, 2, 3, 7, 1, 6, 6, 4, 0, 5, 2, 1, 4, 7, 5, 7, 2, 4, 9, 1, 8, 8, 2, 8, 5, 8, 0, 0, 8, 2, 4, 2, 9, 3, 7, 2, 8, 7, 9, 3, 6, 2, 0, 8, 2, 6, 9, 8, 9, 5, 7, 7, 1, 4, 0, 0, 0, 7, 0, 5, 7, 0, 8, 8, 6, 2, 6, 0, 3, 0, 9, 1, 2, 4, 3, 7, 5, 6, 0, 4, 9, 5, 0, 8, 3, 7, 1, 9, 4, 7, 3, 2, 5, 3, 6, 7, 6, 9, 9, 3, 9, 7, 9, 5, 8, 0, 2, 2, 7, 3, 4, 5, 7, 6, 7, 8, 2, 9, 7, 8, 6, 9, 5, 7, 1, 0, 8, 8, 1, 1, 0, 1, 1, 2, 1, 7, 3, 2, 0, 4, 4, 4, 8, 2, 7, 7, 2, 6, 0, 0, 0, 3, 2, 4, 9, 7, 2, 6, 0, 5, 5, 3, 3, 2, 2, 2, 3, 0, 6, 6, 2, 7, 8, 8, 8, 8, 0, 4, 2, 1, 2, 5, 7, 2, 8, 2, 2, 6, 8, 5, 0, 1, 4, 9, 4, 5, 1, 1, 2, 7, 4, 8, 5, 3, 1, 9, 6, 3, 0, 5, 6, 4, 6, 5, 2, 5, 1, 1, 4, 4, 0, 1, 2, 1, 9, 7, 1, 2, 6, 0, 4, 6, 8, 2, 9, 5, 5, 6, 7, 1, 8, 9, 0, 5, 3, 6, 1, 1, 2, 4, 7, 4, 9, 8, 7, 4, 8, 3, 8, 5, 8, 7, 9, 8, 3, 6, 3, 8, 3, 6, 0, 4, 7, 0, 5, 6, 1, 3, 2, 3, 1, 4, 1, 9, 1, 5, 5, 7, 3, 0, 1, 8, 2, 4, 8, 9, 6, 8, 6, 2, 7, 0, 1, 5, 0, 6, 4, 8, 2, 9, 0, 4, 4, 5, 7, 3, 2, 7, 5, 3, 1, 8, 0, 8, 3, 6, 6, 9, 8, 3, 7, 8, 4, 6, 0, 8, 9, 0, 4, 8, 8, 3, 0, 7, 2, 0, 4, 5, 2, 3, 2, 8, 5, 2, 9, 4, 7, 2, 6, 2, 6, 3, 9, 8, 2, 3, 7, 7, 5, 5, 7, 2, 8, 7, 8, 4, 0, 6, 3, 0, 2, 7, 5, 5, 2, 4, 5, 0, 9, 3, 8, 6, 4, 7, 6, 1, 0, 0, 2, 3, 1, 5, 5, 2, 1, 5, 7, 2, 9, 3, 3, 4, 5, 7, 4, 8, 9, 7, 6, 5, 5, 4, 6, 6, 1, 6, 9, 5, 8, 8, 9, 4, 7, 9, 3, 0, 4, 8, 3, 3, 1, 8, 2, 7, 0, 8, 2, 6, 5, 8, 8, 1, 0, 5, 1, 8, 0, 4, 4, 4, 4, 6, 5, 9, 2, 6, 3, 8, 6, 2, 1, 7, 4, 4, 8, 4, 9, 3, 1, 3, 8, 6, 8, 5, 3, 1, 0, 9, 3, 5, 8, 4, 0, 6, 2, 7, 2, 8, 6, 8, 9, 2, 8, 1, 2, 5, 4, 1, 8, 9, 3, 1, 9, 8, 2, 6, 4, 2, 5, 3, 8, 3, 0, 1, 2, 0, 7, 6, 3, 4, 0, 5, 1, 2, 0, 2, 0, 7, 2, 6, 5, 7, 9, 0, 1, 4, 6, 4, 1, 6, 9, 1, 1, 4}
  base_len := int64(len(base_input))
  
  offset := 1e6*base_input[0]+1e5*base_input[1]+1e4*base_input[2]+1e3*base_input[3]+1e2*base_input[4]+1e1*base_input[5]+base_input[6]
  multiplier := ((base_len*10000)-offset)/(base_len/2)+1
  input := []int64{}
  for i := int64(1); i <= multiplier; i++ {
    input = append(input, base_input...)
  }
  new_input := []int64{}
  length := int64(len(input))
  for i := int64(1); i <= lim; i++ {    
    for l := int64(0); l <= length-1; l++ { 
      m := l+1
      val := inject(input[l:length], m*2)
      new_input = append(new_input, abs(val) % 10)
    }
    input = new_input
    new_input = []int64{}
  }
  abc := (base_len*multiplier)-((base_len*10000)-(offset+9))-9
  fmt.Println(input[abc:abc+8])
}